# Table 1 - kinase list 
CREATE TABLE kinase_list (
  accession_number VARCHAR(300) NOT NULL,
  gene_symbol VARCHAR(300) NOT NULL,
  mass_in_da INT,
  family VARCHAR(300) NOT NULL,
  name_human VARCHAR(300) NOT NULL,
  gemome_starts VARCHAR(300) NOT NULL,
  gemome_ends_protein VARCHAR(300) NOT NULL,
  gemome_ends_protein VARCHAR(10000) NOT NULL,
  PRIMARY KEY (accession_number),
  FOREIGN KEY (family) REFERENCES family(family_name)
  );
  
  # Table 2 - Family list
  CREATE TABLE family_list (
  family_name VARCHAR(300) NOT NULL,
  family_abbreviation VARCHAR(300) NOT NULL,
  PRIMARY KEY (family_abbreviation),
  FOREIGN KEY (family_abbreviation) REFERENCES kinase_list(family)
);


# Table 3 - Phosposite 
# NB - "row_id" is a placeholder name and is subject to change 
CREATE TABLE phosposite_list (
  row_id INT, 
  position INT,
  genome_loc_start INT,
  genome_loc_end  INT,
  residue VARCHAR(300) NOT NULL,
  description VARCHAR(300) NOT NULL,
  neighbouring_seq VARCHAR(300) NOT NULL, 
  PRIMARY KEY (row_id),
  FOREIGN KEY (position) REFERENCES kinase_list(accession_number)
);


# Table 4 - isoforms of the kinases 
CREATE TABLE isoform_list (
  uniprot_entry VARCHAR(300) NOT NULL,  
  entry_name VARCHAR(300) NOT NULL, 
  seq_length INT,
  PRIMARY KEY (uniprot_entry),
  FOREIGN KEY (entry_name) REFERENCES kinase_list(accession_number)
);


------------------------------------------------------------------------------------------------------------------


CREATE TABLE KINASE (
	uniprot_id varchar PRIMARY KEY AUTOINCREMENT,
	gene_symbol varchar,
	name_human varchar,
	family varchar,
	mass varchar,
	full_protein_name varchar,
	reverse_or_forward varchar,
	chromasome varchar,
	gemome_starts integer,
	gemome_end integer,
	prot_seq text,
	gen_seq text,
	ensemble_id varchar,
	function text
);

CREATE TABLE Phosphosites (
	phosposite_id varchar PRIMARY KEY AUTOINCREMENT,
	Residue_Position varchar,
	Modification text,
	Type_Modification varchar,
	Genome_begin integer,
	Genome_end integer
);

CREATE TABLE Family (
	family_abbreviation varchar PRIMARY KEY AUTOINCREMENT,
	Residue_type varchar,
	Full_family_name varchar
);

CREATE TABLE Isoforms (
	Isoform_id varchar PRIMARY KEY AUTOINCREMENT,
	Subcellular varchar,
	Isoform_identifier varchar
);

CREATE TABLE Disease (
	Disease_id varchar PRIMARY KEY AUTOINCREMENT,
	Disease_Reference varchar,
	Disease_Effect text,
	Disease_description text
);

CREATE TABLE Subcellular_Location (
	Subcellular_id varchar PRIMARY KEY AUTOINCREMENT,
	Subcellular_Reference integer,
	Additional_info text
);

CREATE TABLE References (
	Reference_id blob PRIMARY KEY AUTOINCREMENT,
	Publication_type text,
	Publication_date text,
	Publication_name text,
	Publication_volume text,
	Start_page integer,
	End_page integer,
	Publication_type varchar,
	Authors text,
	Pubmed_reference integer,
	DOI varchar
);
